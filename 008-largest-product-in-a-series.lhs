#!/usr/bin/env runhaskell

[Largest product in a series](http://projecteuler.net/problem=8)

Find the greatest product of five consecutive digits in the 1000-digit number.

    73167176531330624919225119674426574742355349194934
    96983520312774506326239578318016984801869478851843
    85861560789112949495459501737958331952853208805511
    12540698747158523863050715693290963295227443043557
    66896648950445244523161731856403098711121722383113
    62229893423380308135336276614282806444486645238749
    30358907296290491560440772390713810515859307960866
    70172427121883998797908792274921901699720888093776
    65727333001053367881220235421809751254540594752243
    52584907711670556013604839586446706324415722155397
    53697817977846174064955149290862569321978468622482
    83972241375657056057490261407972968652414535100474
    82166370484403199890008895243450658541227588666881
    16427171479924442928230863465674813919123162824586
    17866458359124566529476545682848912883142607690042
    24219022671055626321111109370544217506941658960408
    07198403850962455444362981230987879927244284909188
    84580156166097919133875499200524063689912560717606
    05886116467109405077541002256983155200055935729725
    71636269561882670428252483600823257530420752963450


Code
----

> sublistsOfLength :: Int -> [alpha] -> [[alpha]]
> sublistsOfLength n =
>     let f [] = []
>         f ls = take n ls : f (tail ls)
>     in filter (\ ls -> length ls == n) . f

> readInteger :: String -> Integer
> readInteger = read

> computeProduct :: String -> Integer
> computeProduct = product . map (\x -> readInteger [x])

> main :: IO ()
> main = let result = maximum . map computeProduct . sublistsOfLength 5
                    $ "73167176531330624919225119674426574742355349194934969"
>                   ++ "83520312774506326239578318016984801869478851843858615"
>                   ++ "60789112949495459501737958331952853208805511125406987"
>                   ++ "47158523863050715693290963295227443043557668966489504"
>                   ++ "45244523161731856403098711121722383113622298934233803"
>                   ++ "08135336276614282806444486645238749303589072962904915"
>                   ++ "60440772390713810515859307960866701724271218839987979"
>                   ++ "08792274921901699720888093776657273330010533678812202"
>                   ++ "35421809751254540594752243525849077116705560136048395"
>                   ++ "86446706324415722155397536978179778461740649551492908"
>                   ++ "62569321978468622482839722413756570560574902614079729"
>                   ++ "68652414535100474821663704844031998900088952434506585"
>                   ++ "41227588666881164271714799244429282308634656748139191"
>                   ++ "23162824586178664583591245665294765456828489128831426"
>                   ++ "07690042242190226710556263211111093705442175069416589"
>                   ++ "60408071984038509624554443629812309878799272442849091"
>                   ++ "88845801561660979191338754992005240636899125607176060"
>                   ++ "58861164671094050775410022569831552000559357297257163"
>                   ++ "6269561882670428252483600823257530420752963450"
>          in do print result
>                return ()


Answer
------

    40824
